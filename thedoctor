#!/usr/bin/perl -w

# Load in modules
use strict;
use Config::Simple;
use Fcntl;
use utf8;
use v5.10.1;
# For debugging purposes
#use lib './DigitalOcean/lib/';
use WebService::DigitalOcean;

# Suppress experimental warnings
no warnings 'experimental::smartmatch';

# Global Variables
my $num_args = $#ARGV + 1;
my @params = @ARGV;

# Load in configuration from .thedoctor.ini
my %CONFIG = &load_runtime_config();
my $TOKEN = $CONFIG{'defaults.token'};

# Display usage if no args passed in
if ($num_args <= 0) {
	&display_usage();
	exit;
}

# initalize DigitalOcean client
my $do = WebService::DigitalOcean->new(token => $TOKEN);

given ($params[0]) {
	when (['list', 'l']) {
		my $response = $do->droplet_list();
		for (@{ $response->{content} }) {
			print $_->{'id'}.": ".$_->{'name'}."\n";
		}
	}
	when ('status') {
		given ($params[1]) {
			when (! defined($params[1])) {
				&display_usage();
				exit;
			}
			when (/^\d+$/) {
				my $response = $do->droplet_get($params[1]);
				my $d = $response->{content};
				print "$d->{'name'} is currently $d->{'status'} and can be found at $d->{'ip_address'}\n";
			}
			when (/^\w+$/) {
				my $droplet_id = &resolve_droplet_name($params[1]);
				if ($droplet_id lt 0)
				{
					print "Could not locate $params[1]\n";
					exit;
				}
				else
				{
					my $response = $do->droplet_get($droplet_id);
					my $d = $response->{content};
					print "$d->{'name'} is currently $d->{'status'} and located at $d->{'networks'}->{'v4'}[0]->{'ip_address'}\n";
				}
			}
			default {
				&display_usage();
			}
		}
	}
	when ('shutdown') {
		my $droplet_id = '';
		given ($params[1]) {
			when (! defined($params[1])) {
				&display_usage();
				exit;
			}
			when (/^\d+$/) {
				$droplet_id = $params[1];
			}
			when (/^\w+$/) {
				$droplet_id = &resolve_droplet_name($params[1]);
				if ($droplet_id lt 0)
				{
					print "Could not locate $params[1]\n";
					exit;
				}
			}
		}
		$do->droplet_shutdown($droplet_id);
		print "$params[1] has been shutdown\n";
	}
	when ('startup') {
		my $droplet_id = '';
		given ($params[1]) {
			when (! defined($params[1])) {
				&display_usage();
				exit;
			}
			when (/^\d+$/) {
				$droplet_id = $params[1];
			}
			when (/^\w+$/) {
				$droplet_id = &resolve_droplet_name($params[1]);
				if ($droplet_id lt 0)
				{
					print "Could not locate $params[1]\n";
					exit;
				}
			}
		}
		$do->droplet_power_on($droplet_id);
		print "$params[1] has been turned on\n";
	}
	when ('config') {
		given ($params[1]) {
			when (['list', '-l']) {
				foreach my $key (keys %CONFIG) {
					print "$key=$CONFIG{$key}\n";
				}
			}
		}
	}
	default {
		&display_usage();
	}
}

#Subroutines
sub load_runtime_config {
	my $config_path = "$ENV{'HOME'}/.thedoctor.ini";
	my %values = ();
	if (-e $config_path)
	{
		Config::Simple->import_from($config_path, \%values);
	}
	else
	{
		my $cfg = new Config::Simple(syntax=>'ini');

		print "Some configuration is required. Please enter the following:\n";
		print "Token: ";
		chomp(my $token = <>);

		$cfg->param("defaults.token", $token);
		$cfg->write($config_path);
		%values = $cfg->vars();
	}
	return %values;
}

sub resolve_droplet_name {
	my $droplet_id = -1;
	my $response = $do->droplet_list();
	for (@{ $response->{content} }) {
		if (uc($_->{'name'}) eq uc($_[0])) {
			$droplet_id = $_->{'id'};
		}
	}
	return $droplet_id;
}

sub display_usage {
	print "Example Usage:\n";
	print "  thedoctor list\n";
	print "  thedoctor status [droplet name | droplet id]\n";
	print "  thedoctor shutdown [droplet name | droplet id]\n";
	print "  thedoctor startup [droplet name | droplet id]\n";
	print "  thedoctor config [list | -l]\n";
}
